
---
- name: Installing standalone ASM software installation and creating a database
  hosts: all
  gather_facts: yes
  vars_files:
          - oracleASM21c_vars.yml

  tasks:
    - name: Start
      set_fact:
            start_time: "{{ ansible_date_time.iso8601[:19] }}"

    - debug:
          msg: Start time of the script is {{ start_time }}


    - name: Stop and disable firewalld.
      service:
          name: firewalld
          state: stopped
          enabled: False
      ignore_errors: yes

    - name: Installing package rsync
      yum:
        name:
           - rsync
        state: present
        update_cache: true
        skip_broken: true
      ignore_errors: true

    - name: Transfer compat-libstdc from ansible server to Oracle host
      synchronize:
           src: /root/compat-libstdc++-33-3.2.3-72.el7.x86_64.rpm
           dest: /root/compat-libstdc++-33-3.2.3-72.el7.x86_64.rpm
      delegate_to: localhost

    - name: Transfer Oracle ASM libraries from ansible server to Oracle host
      synchronize:
           src: /root/Oralibraries/{{ item }}
           dest: /root/
      with_items:
              - oracleasmlib-2.0.12-1.el7.x86_64.rpm
              - oracleasm-support-2.1.11-2.el7.x86_64.rpm
      delegate_to: localhost

    - name: Installing packages required for Oracle installation
      yum:
         name:
           - kmod-oracleasm
           - oracleasmlib-2.0.12-1.el7.x86_64.rpm
           - oracleasm-support-2.1.11-2.el7.x86_64.rpm

    - name: Installing packages required for Oracle installation
      yum:
        name:
           - compat-libstdc++-33-3.2.3-72.el7.x86_64.rpm
           - unzip
           - rsync
           - bc
           - binutils
           - compat-libcap1
           - elfutils-libelf
           - elfutils-libelf-devel
           - fontconfig-devel
           - glibc
           - glibc-devel
           - ksh
           - libaio
           - libaio-devel
           - libXrender
           - libXrender-devel
           - libX11
           - libXau
           - libXi
           - libXtst
           - libgcc
           - librdmacm-devel
           - libstdc++
           - libstdc++-devel
           - libxcb
           - make
           - net-tools # Clusterware
           - nfs-utils # ACFS
           - python # ACFS
           - python-configshell # ACFS
           - python-rtslib # ACFS
           - python-six # ACFS
           - targetcli # ACFS
           - smartmontools
           - sysstat
           - gcc
           - gcc-c++
           - libXext
           - libXext.i686
           - zlib-devel
           - zlib-devel.i686
           - glibc.i686
           - glibc-devel.i686
           - libaio.i686
           - libaio-devel.i686
           - libX11.i686
           - libXau.i686
           - libXi.i686
           - libXtst.i686
           - libgcc.i686
           - libstdc++.i686
           - libstdc++-devel.i686
           - libxcb.i686
           - psmisc.x86_64
        state: present
        update_cache: true
        skip_broken: true
      ignore_errors: true

    - name: configuring parameters in /etc/sysctl.conf file
      lineinfile:
             path: /etc/sysctl.conf
             state: present
             line: "{{ item }}"
      with_items:
             - 'fs.file-max = 6815744'
             - 'kernel.sem = 250 32000 100 128'
             - 'kernel.shmmni = 4096'
             - 'kernel.shmall = 1073741824'
             - 'kernel.shmmax = 4398046511104'
             - 'kernel.panic_on_oops = 1'
             - 'net.core.rmem_default = 262144'
             - 'net.core.rmem_max = 4194304'
             - 'net.core.wmem_default = 262144'
             - 'net.core.wmem_max = 1048576'
             - 'net.ipv4.conf.all.rp_filter = 2'
             - 'net.ipv4.conf.default.rp_filter = 2'
             - 'fs.aio-max-nr = 1048576'
             - 'net.ipv4.ip_local_port_range = 9000 65500'

    - name: Applying parameters in /etc/sysctl.conf file
      command: "sysctl -p"

    - name: Configuring hard and soft limits
      lineinfile:
             path: /etc/security/limits.conf
             state: present
             line: "{{ item }}"
      with_items:
            -  '*   soft  nofile  500000'
            -  '*   hard  nofile  500000'
            -  '*   soft  nproc  16384'
            -  '*   hard  nproc  16384'
            -  '*   soft  stack  32768'
            -  '*   hard  stack  32768'
            -  '*   hard  memlock  134217728'
            -  '*   soft  memlock  134217728'

    - name: reload settings from all system configuration files
      shell: "{{ item }}"
      with_items:
           -  'ulimit -n 500000'
           -  'ulimit -Hn 500000'
           -  'ulimit -u 16384'
           -  'ulimit -s 32768'
           -  'ulimit -Hs 32768'
           -  'ulimit -l 134217728'
           -  'ulimit -Hl 134217728'

    - name: Setting shared memory file system to 4GB
      command: "mount -t tmpfs shmfs -o size=4096m /dev/shm"

    - name: Creating groups
      group:
         name: "{{ item.name }}"
      with_items:
           - { name: 'oinstall' }
           - { name: 'dba' }
           - { name: 'oper' }
           - { name: 'backupdba' }
           - { name: 'asmdba' }
           - { name: 'asmadmin' }
           - { name: 'asmoper' }
           - { name: 'dgdba' }
           - { name: 'kmdba' }

    - name: Creating oracle user and adding groups to it
      user: name=oracle group=oinstall groups=dba,oper password="{{ oracleuserpassword  | password_hash('sha512') }}"

    - name: Creating grid user and adding groups to it
      user: name=grid group=oinstall groups=dba,oper,backupdba,asmdba,asmoper,asmadmin password="{{ griduserpassword  | password_hash('sha512') }}"

         # ============================================================================
  # Ensure that the Oracle ASMLib driver is configured and enabled
  #   User should be 'oracle'
  #   Group should be 'asmadmin'
  # ============================================================================

    - name:         Get Oracle ASMLib Driver Configuration
      command:      /usr/sbin/oracleasm configure
      register:     oasm_config
      changed_when: false

    - debug:
         var:        oasm_config
         verbosity:  1

    - name:         Set Owner for Oracle ASMLib Driver
      command:      /usr/sbin/oracleasm configure -u oracle
      when:         oasm_config.stdout_lines[1] != "ORACLEASM_UID=oracle"

    - name:         Set Group for Oracle ASMLib Driver
      command:      /usr/sbin/oracleasm configure -g oinstall
      when:         oasm_config.stdout_lines[2] != "ORACLEASM_GID=oinstall"

    - name:         Enable Oracle ASMLib Driver
      command:      /usr/sbin/oracleasm configure -e
      when:         oasm_config.stdout_lines[0] == "ORACLEASM_ENABLED=false"

  # ============================================================================
  # Ensure that the Oracle ASMLib Driver is initialized and loaded
  # ============================================================================

    - name:         Check Oracle ASMLib Driver Status
      command:      /usr/sbin/oracleasm status
      register:     oasm_status
      changed_when: false
      failed_when:  false
      no_log:       true

    - debug:
        var:         oasm_status.stdout
        verbosity:   1

    - debug:
        msg: "{{ oasm_status.stdout }}"

    - name:         Load and initialize Oracle ASMLib Driver
      command:      /usr/sbin/oracleasm init
      when:         oasm_status.stdout_lines[0] is match ('.*no')

    - name:         Verify Oracle ASMLib Driver is loaded and initialized
      command:      /usr/sbin/oracleasm status
      register:     oasm_status
      changed_when: false

  # ============================================================================
  # Initialize all required disk devices with the Oracle ASMLib driver
  # ============================================================================
    - include_tasks: oracleasm_init_disk.yml
      with_items:
          - { dev: "{{ asmdevice1 }}", disk: DATA }
          - { dev: "{{ asmdevice2 }}", disk: FRA }
          - { dev: "{{ asmdevice3 }}", disk: ARCH }
      loop_control:
           loop_var: oasm_disk

    - name: Creating oracle installtion directories
      command: "mkdir -p /{{ DBinstallationfilelocation_oraclehost.split('/')[1] }}"

    - name: Creating grid installation directories
      command: "mkdir -p /{{ GIinstallationfilelocation_oraclehost.split('/')[1] }}"

    - name: Creating directory for swap partition
      file:
         path: /swapmnt
         state: directory

    - name: Creating filesystem
      filesystem:
        fstype: ext4
        dev: "{{ item }}"
      with_items:
             - "{{ DBdevice }}"
             - "{{ swapdevicename }}"
             - "{{ Griddevice }}"

    - name: Mounting the filesystem
      mount:
        path: "{{ item.path1 }}"
        src: "{{ item.device1 }}"
        opts: defaults
        fstype: ext4
        state: mounted
      with_items:
           - { path1: "/{{ ORACLE_BASE.split('=')[1].split('/')[1] }}", device1: "{{ DBdevice }}" }
           - { path1: '/swapmnt', device1: "{{ swapdevicename }}" }
           - { path1: "/{{ GRID_BASE.split('=')[1].split('/')[1] }}", device1: "{{ Griddevice }}" }

    - name: create swap file
      command: dd if=/dev/zero of=/swapmnt/swapfile bs=1G count=8
      ignore_errors: true

    - name: change permission type
      file: path=/swapmnt/swapfile mode=600 state=file

    - name: setup swap
      command: mkswap /swapmnt/swapfile
      ignore_errors: true

    - name: create swap
      command: swapon /swapmnt/swapfile
      ignore_errors: true

    - name: Add to fstab
      action: lineinfile dest=/etc/fstab regexp="swapfile" line="/swapmnt/swapfile none swap sw 0 0" state=present

    - name: start swap
      command: swapon -a

    - name: Creating oracle installation directories
      file:
          path: "{{ item }}"
          state: directory
          owner: oracle
          group: oinstall
          mode: 0775
          recurse: yes
      with_items:
               - "{{ DBinstallationfilelocation_oraclehost.split('/')[:-1] | join ('/') }}"
               - "{{ INVENTORY_LOCATION.split('=')[1] }}"
               - "{{ ORACLE_BASE.split('=')[1] }}"

    - name: Creating grid installation directories
      file:
          path: "{{ item }}"
          state: directory
          owner: grid
          group: oinstall
          mode: 0775
          recurse: yes
      with_items:
               - "{{ GIinstallationfilelocation_oraclehost.split('/')[:-1] | join ('/') }}"
               - "{{ GRID_INVENTORY_LOCATION.split('=')[1] }}"
               - "{{ GRID_BASE.split('=')[1] }}"

    - name: Transfer oracle installation file from ansible server to Oracle host
      synchronize:
           src: "{{ DBinstallationfilelocation_ansibleserver }}"
           dest: "{{ DBinstallationfilelocation_oraclehost }}"
      delegate_to: localhost

    - name: Transfer grid installation file from ansible server to Oracle host
      synchronize:
           src: "{{ GIinstallationfilelocation_ansibleserver }}"
           dest: "{{ GIinstallationfilelocation_oraclehost }}"
      delegate_to: localhost

    - name: Extracting oracle zip file
      command: "unzip -o -q -d  {{ DBinstallationfilelocation_oraclehost.split('/')[:-1] | join ('/') }}  {{ DBinstallationfilelocation_oraclehost }}"

    - name: Extracting grid zip file
      command: "unzip -o -q -d {{ GIinstallationfilelocation_oraclehost.split('/')[:-1] | join ('/') }} {{ GIinstallationfilelocation_oraclehost }}"

    - name: Setting fact for response file location when 18c and 19c
      set_fact:
          srcloc: "{{ DBinstallationfilelocation_oraclehost.split('/')[:-1] | join ('/') }}/install/response/db_install.rsp"
          destloc: "{{ DBinstallationfilelocation_oraclehost.split('/')[:-1] | join ('/') }}/install/response/db_install_new.rsp"
      when:  version == "19c" or version == "18c" or version == "21c"

    - name: Setting fact for response file location when 12c
      set_fact:
          srcloc: "{{ DBinstallationfilelocation_oraclehost.split('/')[:-1] | join ('/') }}/database/response/db_install.rsp"
          destloc: "{{ DBinstallationfilelocation_oraclehost.split('/')[:-1] | join ('/') }}/database/response/db_install_new.rsp"
      when:  version == "12c"

    - name: Creating duplicate oracle DB response file
      copy:
         src: "{{ srcloc }}"
         dest: "{{ destloc }}"
         remote_src: yes

    - name: Creating duplicate grid response file
      copy:
         src: "{{ GIinstallationfilelocation_oraclehost.split('/')[:-1] | join ('/') }}/install/response/gridsetup.rsp"
         dest: "{{ GIinstallationfilelocation_oraclehost.split('/')[:-1] | join ('/') }}/install/response/gridsetup_new.rsp"
         remote_src: yes

    - name: Change permissions to 775 for oracle install directories
      file:
         path: /{{ DBinstallationfilelocation_oraclehost.split("/")[1] }}
         owner: oracle
         group: oinstall
         mode: 0775
         recurse: yes

    - name: Change permissions to 775 for grid install directories
      file:
         path: /{{ GIinstallationfilelocation_oraclehost.split("/")[1] }}
         owner: grid
         group: oinstall
         mode: 0775
         recurse: yes

    - name: Replacing contents in grid response file
      replace:
          path: "{{ GIinstallationfilelocation_oraclehost.split('/')[:-1] | join ('/') }}/install/response/gridsetup_new.rsp"
          regexp: "{{ item.regexp1 }}"
          replace: "{{ item.replace }}"
      with_items:
           - { regexp1: 'oracle.install.option=', replace: "{{ oraclegridinstalloption }}" }
           - { regexp1: 'ORACLE_BASE=', replace: "{{ GRID_BASE }}" }
           - { regexp1: 'INVENTORY_LOCATION=', replace: "{{ GRID_INVENTORY_LOCATION }}" }
           - { regexp1: 'oracle.install.asm.OSDBA=', replace: "{{ oracleinstallasmOSDBA }}" }
           - { regexp1: 'oracle.install.asm.OSOPER=', replace: "{{ oracleinstallasmOSOPER }}" }
           - { regexp1: 'oracle.install.asm.OSASM=', replace: "{{ oracleinstallasmOSASM }}" }
           - { regexp1: 'oracle.install.crs.config.ClusterConfiguration=', replace: "{{ oracleinstallcrsconfigCC }}" }
           - { regexp1: 'oracle.install.crs.config.configureAsExtendedCluster=', replace: "{{ oracleinstallcrsconfigEC }}" }
           - { regexp1: 'oracle.install.asm.SYSASMPassword=', replace: "{{ oracleinstallasmSYSASMPassword }}" }
           - { regexp1: 'oracle.install.asm.diskGroup.name=', replace: "{{ oracleinstallasmdiskGroupname }}" }
           - { regexp1: 'oracle.install.asm.diskGroup.redundancy=', replace: "{{ oracleinstallasmdiskGroupredundancy }}" }
           - { regexp1: 'oracle.install.asm.diskGroup.AUSize=', replace: "{{ oracleinstallasmdiskGroupAUSize }}" }
           - { regexp1: 'oracle.install.asm.diskGroup.disks=', replace: "{{ oracleinstallasmdiskGroupdisks }}" }
           - { regexp1: 'oracle.install.asm.monitorPassword=', replace: "{{ oracleinstallasmmonitorPassword }}" }
           - { regexp1: 'oracle.install.asm.diskGroup.diskDiscoveryString=', replace: "{{ oracleinstallasmdiskGroupdiskdiskDiscoveryString }}" }

    - name: Replacing contents in oracle response file
      replace:
          path: "{{ destloc }}"
          regexp: "{{ item.regexp1 }}"
          replace: "{{ item.replace }}"
      with_items:
           - { regexp1: 'oracle.install.option=', replace: "{{ oracleinstalloption }}" }
           - { regexp1: 'INVENTORY_LOCATION=', replace: "{{ INVENTORY_LOCATION }}" }
           - { regexp1: 'UNIX_GROUP_NAME=', replace: "{{ UNIX_GROUP_NAME }}" }
           - { regexp1: 'ORACLE_HOME=', replace: "{{ ORACLE_HOME }}" }
           - { regexp1: 'ORACLE_BASE=', replace: "{{ ORACLE_BASE }}" }
           - { regexp1: 'oracle.install.db.InstallEdition=', replace: "{{ oracleinstalldbInstallEdition }}" }
           - { regexp1: 'oracle.install.db.OSDBA_GROUP=', replace: "{{ oracleinstalldbOSDBA_GROUP }}" }
           - { regexp1: 'oracle.install.db.OSOPER_GROUP=', replace: "{{ oracleinstalldbOSOPER_GROUP }}" }
           - { regexp1: 'oracle.install.db.OSBACKUPDBA_GROUP=', replace: "{{ oracleinstalldbOSBACKUPDBA_GROUP }}" }
           - { regexp1: 'oracle.install.db.OSDGDBA_GROUP=', replace: "{{ oracleinstalldbOSDGDBA_GROUP }}" }
           - { regexp1: 'oracle.install.db.OSKMDBA_GROUP=', replace: "{{ oracleinstalldbOSKMDBA_GROUP }}" }
           - { regexp1: 'oracle.install.db.OSRACDBA_GROUP=', replace: "{{ oracleinstalldbOSRACDBA_GROUP }}" }
           - { regexp1: 'oracle.install.db.config.starterdb.type=', replace: "{{ oracleinstalldbconfigstarterdbtype }}" }
           - { regexp1: 'oracle.install.db.config.starterdb.globalDBName=', replace: "{{ oracleinstalldbconfigstarterdbglobalDBName }}" }
           - { regexp1: 'oracle.install.db.config.starterdb.SID=', replace: "{{ oracleinstalldbconfigstarterdbSID }}" }
           - { regexp1: 'oracle.install.db.ConfigureAsContainerDB=', replace: "{{ oracleinstalldbConfigureAsContainerDB }}" }
           - { regexp1: 'oracle.install.db.config.PDBName=', replace: "{{ oracleinstalldbconfigPDBName }}" }
           - { regexp1: 'oracle.install.db.config.starterdb.memoryLimit=', replace: "{{ oracleinstalldbconfigstarterdbmemoryLimit }}" }
           - { regexp1: 'oracle.install.db.config.starterdb.storageType=', replace: "{{ oracleinstalldbconfigstarterdbstorageType }}" }
           - { regexp1: 'oracle.install.db.config.starterdb.password.ALL=', replace: "{{ oracleinstalldbconfigstarterdbpasswordALL }}" }
           - { regexp1: 'oracle.install.db.config.starterdb.fileSystemStorage.dataLocation=', replace: "{{ oracleinstalldbconfigstarterdbfileSystemStoragedataLocation }}" }
           - { regexp1: 'oracle.install.db.config.asm.diskGroup=', replace: "{{ oralceinstalldbconfigasmdiskGroup }}" }

    - name: Installing cvuqdisk package
      command: "rpm -ivh {{ GRID_HOME }}/cv/rpm/cv*"


    - name: Install grid Client
      command: "{{ GRID_HOME }}/gridSetup.sh -silent  -waitForCompletion -responseFile {{ GRID_HOME }}/install/response/gridsetup_new.rsp"
      register: client_runinstaller_output
      become: yes
      become_method: su
      become_user: grid
      failed_when: client_runinstaller_output.rc != 0
      ignore_errors: yes

    - debug:
        msg: "{{ client_runinstaller_output }}"

    - name: Runnning orainstRoot.sh script
      command: "{{ GRID_INVENTORY_LOCATION.split('=')[1] }}/orainstRoot.sh"
      become: yes
      become_method: su
      become_user: root

    - name: Runnning root.sh script
      command: "{{ GRID_HOME }}/root.sh"
      become: yes
      become_method: su
      become_user: root
      ignore_errors: yes
      when:  version == "12c"

    - name: Runnning root.sh script
      command: "{{ GRID_HOME }}/root.sh"
      become: yes
      become_method: su
      become_user: root
      when:  version == "19c" or version == "18c" or version == "21c"

    - name: Executing configTools
      command: "{{ GRID_HOME }}/gridSetup.sh -silent  -executeConfigTools -waitForCompletion -responseFile {{ GRID_HOME }}/install/response/gridsetup_new.rsp"
      register: configTools_output
      become: yes
      become_method: su
      become_user: grid
      failed_when: "'Successfully Configured Software' not in configTools_output.stdout"

    - name: Creating environment variables for grid
      copy:
           dest: "/home/grid/.bash_profile"
           content: |
               export ORACLE_SID=+ASM
               export ORACLE_BASE={{ GRID_BASE.split('=')[1] }}
               export ORACLE_HOME={{ ORACLE_HOME.split('=')[1] }}
               export PATH=$ORACLE_HOME/bin:$PATH
      become: yes
      become_method: su
      become_user: grid

    - name: setting runInstaller location when 18c and 19c
      set_fact:
          runInsloc: "{{ ORACLE_HOME.split('=')[1] }}/runInstaller"
      when:  version == "19c" or version == "18c" or version == "21c"

    - name: setting runInstaller location when 12c
      set_fact:
          runInsloc: "{{ ORACLE_HOME.split('=')[1] }}/database/runInstaller"
      when:  version == "12c"

    - name: Install Oracle Client
      command: "{{ runInsloc }} -silent  -waitForCompletion -responseFile {{ destloc }}"
      register: client_runinstaller_output
      become: yes
      become_method: su
      become_user: oracle
      failed_when: client_runinstaller_output.rc != 0
      when:  version == "19c" or version == "18c" or version == "21c"
      ignore_errors: yes

    - name: Install Oracle Client
      command: "{{ runInsloc }} -silent  -waitForCompletion -responseFile {{ destloc }}"
      register: client_runinstaller_output
      become: yes
      become_method: su
      become_user: oracle
      failed_when: client_runinstaller_output.rc != 0
      when:  version == "12c"
      ignore_errors: yes

    - name: Runnning root.sh script
      command: "{{ ORACLE_HOME.split('=')[1] }}/root.sh"
      become: yes
      become_method: su
      become_user: root
      when:  version == "21c"
    

    - name: Executing configTools
      command: "{{ runInsloc }} -silent  -executeConfigTools -waitForCompletion -responseFile {{ destloc }}"
      register: configTools_output
      become: yes
      become_method: su
      become_user: oracle
      failed_when: "'Successfully Configured Software' not in configTools_output.stdout"

    - block:
       - name: Creating environment variables for oracle
         copy:
           dest: "/home/oracle/.bash_profile"
           content: |
               export ORACLE_SID={{ oracleinstalldbconfigstarterdbSID.split('=')[1] }}
               export ORACLE_BASE={{ ORACLE_BASE.split('=')[1] }}
               export ORACLE_HOME={{ ORACLE_HOME.split('=')[1] }}
               export PATH=$ORACLE_HOME/bin:$PATH

       - name: Creating sql file to enable archive log
         copy:
           dest: "/home/oracle/enablearchive.sql"
           content: |
               archive log list;
               shutdown immediate;
               startup mount;
               alter database archivelog;
               alter database open;
               select name,log_mode from v$database;
               archive log list;

       - name: Enabling archive log
         shell: ". /home/oracle/.bash_profile; sqlplus / as sysdba < /home/oracle/enablearchive.sql"
         register: command_out

       - debug:
           msg: "{{ command_out.stdout | regex_replace('[\\r\\n\\t]+','') }}"


       - name: Creating diskgroups FRA and ARCH when 18c or 19c or 21c
         command: "{{ item }}"
         with_items:
                -  "{{ GRID_HOME }}/bin/asmca -silent -createDiskGroup -diskGroupName FRA -disk '/dev/oracleasm/disks/FRA' -redundancy EXTERNAL -au_size 64 -compatible.asm '{{ version[:-1] }}.0.0.0.0' -compatible.rdbms '{{ version[:-1] }}.0.0.0.0' -compatible.advm '{{ version[:-1] }}.0.0.0.0'"
                -  "{{ GRID_HOME }}/bin/asmca -silent -createDiskGroup -diskGroupName ARCH -disk '/dev/oracleasm/disks/ARCH' -redundancy EXTERNAL -au_size 64 -compatible.asm '{{ version[:-1] }}.0.0.0.0' -compatible.rdbms '{{ version[:-1] }}.0.0.0.0' -compatible.advm '{{ version[:-1] }}.0.0.0.0'"
         when:  version == "19c" or version == "18c" or version == "21c"

       - name: Creating diskgroups FRA and ARCH when 12c
         command: "{{ item }}"
         with_items:
                -  "{{ GRID_HOME }}/bin/asmca -silent -createDiskGroup -diskGroupName FRA -disk '/dev/oracleasm/disks/FRA' -redundancy EXTERNAL -au_size 64 -compatible.asm '{{ version[:-1] }}.2' -compatible.rdbms '{{ version[:-1] }}.2' -compatible.advm '{{ version[:-1] }}.2'"
                -  "{{ GRID_HOME }}/bin/asmca -silent -createDiskGroup -diskGroupName ARCH -disk '/dev/oracleasm/disks/ARCH' -redundancy EXTERNAL -au_size 64 -compatible.asm '{{ version[:-1] }}.2' -compatible.rdbms '{{ version[:-1] }}.2' -compatible.advm '{{ version[:-1] }}.2'"
         when:  version == "12c"

       - name: Creating sql file to change archive and FRA destination"
         copy:
           dest: "/home/oracle/ArchFradest.sql"
           content: |
                show parameter db_recovery_file;
                alter system set db_recovery_file_dest_size=20G scope=both;
                alter system set db_recovery_file_dest='+FRA';
                archive log list;
                alter system set log_archive_dest_1='LOCATION=+ARCH' scope=both;
                archive log list;

       - name: Setting diskGroup FRA and ARCH as destination
         shell: ". /home/oracle/.bash_profile; sqlplus / as sysdba < /home/oracle/ArchFradest.sql"
         register: command_out

       - debug:
           msg: "{{ command_out.stdout | regex_replace('[\\r\\n\\t]+','') }}"

       - name: Creating mutliple databases
         command: '{{ ORACLE_HOME.split("=")[1] }}/bin/dbca -silent -createDatabase  -templateName General_Purpose.dbc  -gdbname {{ item }} -sid {{ item }} -responseFile NO_VALUE  -enableArchive true  -archiveLogDest ""+ARCH"" -characterSet AL32UTF8  -sysPassword ""{{ oracleinstalldbconfigstarterdbpasswordALL.split("=")[1] }}""  -systemPassword ""{{ oracleinstalldbconfigstarterdbpasswordALL.split("=")[1] }}"" -createAsContainerDatabase false  -databaseType GENERAL_PURPOSE  -memoryMgmtType auto_sga  -totalMemory 1536  -storageType ASM  -datafileDestination ""+DATA""  -redoLogFileSize 50  -emConfiguration NONE  -ignorePreReqs'
         register: dbcreate_output
         failed_when: dbcreate_output.rc != 0
         when: item != 'None'
         with_items: "{{ databases }}"

       - name: Creating environment variables for oracle
         debug:
           msg:
            - "Oracle software/DB installation is completed successfully"
            - "Follow the below instructions to connect to the database"
            - "su oracle"
            - "Set env variables by running '. /home/oracle/.bash_profile'"
            - "Run '. oraenv' and provide oracle sid name {{ oracleinstalldbconfigstarterdbSID.split('=')[1] }}"
            - "Run 'sqlplus / as sysdba'"

       - name: force update of current timestamp
         setup: filter='ansible_date_time'

       - name: Get runtime
         set_fact:
           runtime: "{{ ((ansible_date_time.iso8601[:19] | to_datetime('%Y-%m-%dT%H:%M:%S')) - ( start_time  | to_datetime('%Y-%m-%dT%H:%M:%S'))).seconds }}"

       - debug:
           msg: Run time of the script is {{ runtime }}
      become: yes
      become_method: su
      become_user: oracle

    - name: force update of current timestamp
      setup: filter='ansible_date_time'

    - name: Get runtime
      set_fact:
           runtime: "{{ ((ansible_date_time.iso8601[:19] | to_datetime('%Y-%m-%dT%H:%M:%S')) - ( start_time  | to_datetime('%Y-%m-%dT%H:%M:%S'))).seconds }}"

    - debug:
           msg: Run time of the script is {{ runtime }}
